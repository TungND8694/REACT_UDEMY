{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tasks, setTasks] = useState([]);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"47V/V/up9U9rSJyqYIMJNeWJ16w=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/react/section15-anotherExample/src/hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","tasks","setTasks","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","loadedTasks","taskKey","push","id","text","err","message","useEffect","fetchTasks","taskAddHandler","task","prevTasks","concat"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAIA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAeC,SAAf,KAA6B;AAAA;;AACzC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACF,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAC1BX,aAAa,CAACY,GADY,EACP;AACfC,QAAAA,MAAM,EAACb,aAAa,CAACa,MAAd,GAAuBb,aAAa,CAACa,MAArC,GAA8C,KADtC;AAEfC,QAAAA,OAAO,EAAEd,aAAa,CAACc,OAAd,GAAwBd,aAAa,CAACc,OAAtC,GAA+C,EAFzC;AAGfC,QAAAA,IAAI,EAAEf,aAAa,CAACe,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAejB,aAAa,CAACe,IAA7B,CAArB,GAA0D;AAHjD,OADO,CAA5B;;AAOA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACApB,MAAAA,SAAS,CAACmB,IAAD,CAAT;AAEA,YAAME,WAAW,GAAG,EAApB;;AAEA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AAC1BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcG;AAAnC,SAAjB;AACD;;AAEDnB,MAAAA,QAAQ,CAACe,WAAD,CAAR;AACD,KAtBD,CAsBE,OAAOK,GAAP,EAAY;AACZtB,MAAAA,QAAQ,CAACsB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDzB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GA7BD;;AA+BA0B,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/BzB,IAAAA,QAAQ,CAAE0B,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAGA,SAAO;AACH9B,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHI,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKD,CAhDD;;GAAMT,O;;AAiDN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\n\r\n\r\nconst useHttp = (requestConfig,applyData) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const sendRequest = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        requestConfig.url, {\r\n            method:requestConfig.method ? requestConfig.method : 'GET',\r\n            headers: requestConfig.headers ? requestConfig.headers :{},\r\n            body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\r\n        }\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Request failed!\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data)\r\n\r\n      const loadedTasks = [];\r\n\r\n      for (const taskKey in data) {\r\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n      }\r\n\r\n      setTasks(loadedTasks);\r\n    } catch (err) {\r\n      setError(err.message || \"Something went wrong!\");\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  const taskAddHandler = (task) => {\r\n    setTasks((prevTasks) => prevTasks.concat(task));\r\n  };\r\n  return {\r\n      isLoading: isLoading,\r\n      error: error,\r\n      sendRequest: sendRequest\r\n  }\r\n}\r\nexport default useHttp"]},"metadata":{},"sourceType":"module"}