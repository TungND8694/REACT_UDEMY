{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\react\\\\section15-anotherExample\\\\src\\\\components\\\\NewTask\\\\NewTask.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewTask = props => {\n  _s();\n\n  const {\n    isLoading,\n    error,\n    sendRequest: sendTaskRequest\n  } = useHttp(); // const [isLoading, setIsLoading] = useState(false);\n  //const [error, setError] = useState(null);\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n\n    const createdTask = {\n      id: generatedId,\n      text: taskText\n    };\n    props.onAddTask(createdTask);\n  };\n\n  const enterTaskHandler = async taskText => {\n    sendTaskRequest({\n      url: \"https://hooks-3b0bb-default-rtdb.firebaseio.com/tasks.json\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: {\n        text: taskText\n      }\n    }, createTask.bind(taskText)); // setIsLoading(true);\n    // setError(null);\n    // try {\n    //   const response = await fetch(\n    //     \"https://hooks-3b0bb-default-rtdb.firebaseio.com/tasks.json\",\n    //     {\n    //       method: \"POST\",\n    //       body: JSON.stringify({ text: taskText }),\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //     }\n    //   );\n    //   if (!response.ok) {\n    //     throw new Error(\"Request failed!\");\n    //   }\n    //   const data = await response.json();\n    //   const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n    //   const createdTask = { id: generatedId, text: taskText };\n    //   props.onAddTask(createdTask);\n    // } catch (err) {\n    //   setError(err.message || \"Something went wrong!\");\n    // }\n    // setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n      onEnterTask: enterTaskHandler,\n      loading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTask, \"e+CZgtYWzn/WEePX8yQWKpC3/rg=\", false, function () {\n  return [useHttp];\n});\n\n_c = NewTask;\nexport default NewTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/react/section15-anotherExample/src/components/NewTask/NewTask.js"],"names":["useState","Section","TaskForm","useHttp","NewTask","props","isLoading","error","sendRequest","sendTaskRequest","createTask","taskText","taskData","generatedId","name","createdTask","id","text","onAddTask","enterTaskHandler","url","method","headers","body","bind"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACzB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAAW,EAAEC;AAAjC,MAAqDN,OAAO,EAAlE,CADyB,CAGzB;AACA;;AAEA,QAAMO,UAAU,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACzC,UAAMC,WAAW,GAAGD,QAAQ,CAACE,IAA7B,CADyC,CACN;;AACnC,UAAMC,WAAW,GAAG;AAAEC,MAAAA,EAAE,EAAEH,WAAN;AAAmBI,MAAAA,IAAI,EAAEN;AAAzB,KAApB;AAEAN,IAAAA,KAAK,CAACa,SAAN,CAAgBH,WAAhB;AACD,GALD;;AAOA,QAAMI,gBAAgB,GAAG,MAAOR,QAAP,IAAoB;AAC3CF,IAAAA,eAAe,CACb;AACEW,MAAAA,GAAG,EAAE,4DADP;AAEEC,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAHX;AAMEC,MAAAA,IAAI,EAAE;AAAEN,QAAAA,IAAI,EAAEN;AAAR;AANR,KADa,EASbD,UAAU,CAACc,IAAX,CAAgBb,QAAhB,CATa,CAAf,CAD2C,CAa3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACD,GAzCD;;AA2CA,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,WAAW,EAAEQ,gBAAvB;AAAyC,MAAA,OAAO,EAAEb;AAAlD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,KAAK,iBAAI;AAAA,gBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA9DD;;GAAMH,O;UACuDD,O;;;KADvDC,O;AAgEN,eAAeA,OAAf","sourcesContent":["import { useState } from \"react\";\n\nimport Section from \"../UI/Section\";\nimport TaskForm from \"./TaskForm\";\nimport useHttp from \"../../hooks/use-http\";\n\nconst NewTask = (props) => {\n  const { isLoading, error, sendRequest: sendTaskRequest } = useHttp();\n\n  // const [isLoading, setIsLoading] = useState(false);\n  //const [error, setError] = useState(null);\n\n  const createTask = (taskText, taskData) => {\n    const generatedId = taskData.name; // firebase-specific => \"name\" contains generated id\n    const createdTask = { id: generatedId, text: taskText };\n\n    props.onAddTask(createdTask);\n  };\n\n  const enterTaskHandler = async (taskText) => {\n    sendTaskRequest(\n      {\n        url: \"https://hooks-3b0bb-default-rtdb.firebaseio.com/tasks.json\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: { text: taskText },\n      },\n      createTask.bind(taskText)\n    );\n    \n    // setIsLoading(true);\n    // setError(null);\n    // try {\n    //   const response = await fetch(\n    //     \"https://hooks-3b0bb-default-rtdb.firebaseio.com/tasks.json\",\n    //     {\n    //       method: \"POST\",\n    //       body: JSON.stringify({ text: taskText }),\n    //       headers: {\n    //         \"Content-Type\": \"application/json\",\n    //       },\n    //     }\n    //   );\n\n    //   if (!response.ok) {\n    //     throw new Error(\"Request failed!\");\n    //   }\n\n    //   const data = await response.json();\n\n    //   const generatedId = data.name; // firebase-specific => \"name\" contains generated id\n    //   const createdTask = { id: generatedId, text: taskText };\n\n    //   props.onAddTask(createdTask);\n    // } catch (err) {\n    //   setError(err.message || \"Something went wrong!\");\n    // }\n    // setIsLoading(false);\n  };\n\n  return (\n    <Section>\n      <TaskForm onEnterTask={enterTaskHandler} loading={isLoading} />\n      {error && <p>{error}</p>}\n    </Section>\n  );\n};\n\nexport default NewTask;\n"]},"metadata":{},"sourceType":"module"}